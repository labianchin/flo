package com.spotify.flo.dsl

import com.spotify.flo.EvalContext.Value
import com.spotify.flo.Task
import com.spotify.flo._

import scala.reflect.ClassTag

object FloTask {
  def named[Z: ClassTag](name: String, args: Any*): TaskBuilder0[Z] = new Builder0(name, args:_*)
}

trait TaskBuilder0[Z] {
  def process(fn: => Z): Task[Z]
  def processWithContext(fn: EvalContext => Value[Z]): Task[Z]
  def input[A](task: => Task[A]): TaskBuilder1[A, Z]
  def inputs[A](tasks: => List[Task[A]]): TaskBuilder1[List[A], Z]

  def context[A](taskContextGeneric: TaskContextGeneric[A]): TaskBuilder1[A, Z]
  def context[A](taskContextStrict: TaskContextStrict[A, Z]): TaskBuilder1[A, Z]
}
{{#genBuilder}}

trait TaskBuilder{{arity}}[{{typeArgs}}, Z] {
  def process(fn: ({{typeArgs}}) => Z): Task[Z]

  def processWithContext(fn: EvalContext => ({{typeArgs}}) => Value[Z]): Task[Z]
  {{^iter.isLast}}

  def context[{{nextArg}}](taskContextGeneric: TaskContextGeneric[{{nextArg}}]): TaskBuilder{{arityPlus}}[{{typeArgs}}, {{nextArg}}, Z]
  def context[{{nextArg}}](taskContextStrict: TaskContextStrict[{{nextArg}}, Z]): TaskBuilder{{arityPlus}}[{{typeArgs}}, {{nextArg}}, Z]

  def input[{{nextArg}}](task: => Task[{{nextArg}}]): TaskBuilder{{arityPlus}}[{{typeArgs}}, {{nextArg}}, Z]

  def inputs[{{nextArg}}](tasks: => List[Task[{{nextArg}}]]): TaskBuilder{{arityPlus}}[{{typeArgs}}, List[{{nextArg}}], Z]
  {{/iter.isLast}}
}
{{/genBuilder}}
